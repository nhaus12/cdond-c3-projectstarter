version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.6
  node: circleci/node@5.0.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker: 
      - image: cimg/node:16.13.1
    resource_class: medium
    steps:
      - checkout 
      - restore_cache: 
          keys: 
            - frontend-build
      - run:
          name: Front-end test
          command: | 
            cd frontend 
            npm install
            npm run test

  test-backend:
    docker:
      - image: cimg/node:16.13.1
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install 
            npm run test

  scan-frontend:
    docker:
      - image: cimg/node:16.13.1
    resource_class: medium
    steps:
      - checkout 
      - restore_cache: 
          keys: 
            - frontend-build
      - run:
          name: Front-end audit
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:16.13.1
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Back-end audit
          command: |
            cd backend
            npm install 
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    resource_class: medium
    steps:
      - checkout
      - run: 
          name: Add tar, gzip utilities for workspace persistence
          command: yum install -y tar gzip 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    resource_class: medium
    steps:
      - checkout 
      - add_ssh_keys:
          fingerprints:
            - "04:39:8b:e3:02:70:25:0e:0a:7b:dd:dc:c3:cb:de:60"
      - attach_workspace: 
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible 
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:16.13.1
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Run migrations
          command: |
            cd ~/project/backend
            npm install 
            npm run migrations > migrations_dump.txt 
      - run:
          # It seems like memstash.io is no longer available/accessible (?)
          name: Report migration results
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "Migration succeeded for ${CIRCLE_WORKFLOW_ID:0:7}"
            else
              echo "Migration failed for ${CIRCLE_WORKFLOW_ID:0:7}:"
              cat ~/project/backend/migrations_dump.txt
            fi

  deploy-frontend:
    docker:
      - image: cimg/node:16.13.1
    resource_class: medium
    steps:
      - checkout
      - run: 
          name: Add tar, gzip utilities for workspace retrieval
          command: sudo apt install -y tar gzip 
      - attach_workspace: 
          at: ~/
      #- run:
      #    name: Install Node, NPM
      #    command: sudo apt install -y nodejs npm
      - aws-cli/setup
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo $API_URL >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build 
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [configure-infrastructure]